<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    border:1px solid #d3d3d3;
    background-color: #f1f1f1;
}myGamePiece
</style>
</head>
<body onload="startGame()">
<script>

var myGamePiece;
var myObstacles = [];
var myScore;
var myText;

function startGame() {
    myGamePiece = new component(60, 30, "red", 10, 120);
    img = new Image();
    img.src = "http://pixelartmaker.com/art/dfa18b21ddb32df.png";
	img.width = 80;
    img.height = 40;
    myGamePiece.gravity = 0.05;
    myScore = new component("30px", "Consolas", "black", 280, 40, "text");
    myText = new component("15px", "Consolas", "black", 280, 60, "text");
    myGameArea.start();
}

var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 480;
        this.canvas.height = 270;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);
        },
    restart : function() {
        this.frameNo = 0;
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        myObstacles = [];
        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
}

function component(width, height, color, x, y, type) {
    this.type = type;
    this.score = 0;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;    
    this.x = x;
    this.y = y;
    this.gravity = 0;
    this.gravitySpeed = 0;
    this.update = function() {
        ctx = myGameArea.context;
        if (this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else if (this.type == "Obstacles"){
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
			ctx = myGameArea.context;
		} else{
        ctx.save();
		
        ctx.translate(this.x  + (this.width/2), this.y +  (this.height/2));
		if(myGamePiece.gravitySpeed < -0.3){
			ctx.rotate(-15*Math.PI / 180) 
		/*}else if(myGamePiece.gravitySpeed < -0.2){
			ctx.rotate(3,14/180*15)*/ 
		}else if(myGamePiece.gravitySpeed > 0.3){
			ctx.rotate(15*Math.PI / 180) 
		}else{
			ctx.rotate(0) 
		}
        //ctx.rotate(this.angle);
        ctx.fillStyle = color;
        //ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);
		ctx.drawImage(img, this.width / -2, this.height / -2, img.width, img.height);		
        ctx.restore(); 
			//img.rotate(3,14/180*15);
		
        }
    }
    this.newPos = function() {
        this.gravitySpeed += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY + this.gravitySpeed;
        this.hitBottom();
    }
    this.hitBottom = function() {
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
            this.y = rockbottom;
            this.gravitySpeed = 0;
        }
    }
    this.crashWith = function(otherobj) {
        var myleft = this.x+10;
        var myright = this.x+ (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
    for (i = 0; i < myObstacles.length; i += 1) {
        if (myGamePiece.crashWith(myObstacles[i])) {
            return;
        } 
    }
    myGameArea.clear();
    myGameArea.frameNo += 1;
    if (myGameArea.frameNo == 1 || everyinterval(150)) {
        x = myGameArea.canvas.width;
        minHeight = 20;
        maxHeight = 200;
        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
        minGap = 50;
        maxGap = 200;
        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
        myObstacles.push(new component(10, height, "green", x, 0, "Obstacles"));
        myObstacles.push(new component(10, x - height - gap, "green", x, height + gap, "Obstacles"));
    }
    for (i = 0; i < myObstacles.length; i += 1) {
        myObstacles[i].x += -1;
        myObstacles[i].update();
    }
    myScore.text="Очки: " + myGameArea.frameNo;
    myScore.update();
    if(myGameArea.frameNo > 5000){
    myText.text = "Бендер: !О_О!";
    myText.update();
    }else if(myGameArea.frameNo > 2000){
    myText.text = "Бендер: Ну ти даєш!";
    myText.update();
    }else if(myGameArea.frameNo > 1000){
    myText.text = "Бендер: Молодець!";
    myText.update();
    }else if(myGameArea.frameNo > 900){
    myText.text = "Бендер: Майже 1000!";
    myText.update();
    }else if(myGameArea.frameNo > 750){
    myText.text = "Бендер: Давай, ще трішки!";
    myText.update();
    }
    myGamePiece.newPos();
    myGamePiece.update();
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function accelerate(n) {
    myGamePiece.gravity = n;
	if((this.landing_vel > localStorage.getItem("landing2")) ||( (localStorage.getItem("landing2") === null))){
				localStorage.setItem("landing2", this.landing_vel);
			}
}
</script>
<br>
<button onmousedown="accelerate(-0.2)" onmouseup="accelerate(0.05)">Прискорення</button>
<button onmouseup="myGameArea.restart();">Спочатку</button>
<p>Використовуй прискорення, щоб залишитися у повітрі</p>
<p>Валентино, набери 1000 очок і зможеш саджати мою ракету</p>
</body>
</html>
